		ORG	0000

		MOV		P0,	#0FFH			;P0를 입력으로 설정하고 키패드를 입력받을 수 있게 한다.
		MOV		P2,	#0FFH			;P2를 입력으로 설정

START:	;키패드에서 어떤 KEY가 눌렸는지 판단하는 루프
		MOV		R0,	#00H		;R0는 어떤 key가 눌렸는지 알려주기 위해 두었고 초기화 
		CLR		F0			; F0 초기화/ F0=1 이면 KEY가 눌린 것
		
;아래코드는 ROW0 확인, ROW는 세로방향으로 총 4행이므로 P0.0은 ROW0이고, P0.1, P0.2, P0.3은 차례대로 ROW1,2,3이다. 	(P0.0을 제외하고 ROW를 비교하는 나머지 비트들은 SETB시켜 ROW0만 비교할 수 있도록 설정)
		CLR		P0.0			
		SETB		P0.1
		SETB		P0.2
		SETB		P0.3
		LCALL		COL	;ROW비교 후 COL을 호출하여 비교하여 눌린 키패드를 알 수 있다
		JB		F0, 	OUT		;변수 F0 = 1 이면 키패드가 눌린 것으로 키패드 확인루프를 나간다 
		
;ROW1 확인	(P0.1을 제외하고 ROW를 비교하는 나머지 비트들은 SETB시켜 ROW1만 비교할 수 있도록 설정)
		CLR		P0.1
		SETB		P0.0
		SETB		P0.2
		SETB		P0.3
		LCALL		COL
		JB		F0, 	OUT	;변수 F0 = 1 이면 키패드가 눌린 것으로 키패드 확인루프를 나간다 

;ROW2 확인 	(P0.2을 제외하고 ROW를 비교하는 나머지 비트들은 SETB시켜 ROW2만 비교할 수 있도록 설정)
		CLR		P0.2
		SETB		P0.0
		SETB		P0.1
		SETB		P0.3
		LCALL		COL
		JB		F0, 	OUT	;변수 F0 = 1 이면 키패드가 눌린 것으로 키패드 확인루프를 나간다 

;ROW3 확인 	(P0.3을 제외하고 ROW를 비교하는 나머지 비트들은 SETB시켜 ROW3만 비교할 수 있도록 설정)
		CLR		P0.3
		SETB		P0.0
		SETB		P0.1
		SETB		P0.2
		LCALL		COL
		JB		F0, 	OUT	;변수 F0 = 1 이면 키패드가 눌린 것으로 키패드 확인루프를 나간다 
		
		LJMP		START		; 눌려진 KEY가 없으면 START로 점프하여 반복확인

COL:		;COLUMN은 가로방향으로 총 3열이므로 P0.4은 COL0이고, P0.5, P0.6은 차례대로 COL1,2이다.  ROW가 눌리면 COL을 비교하고 COL 0,1,2 과 각각 비교한다.
		
;ROW와 COL이 둘 다 0 이므로 ROW와 COL의 위치에 따라 특정 KEY가 눌려졌다고 판단할 수 있다
		JNB		P0.4,	GET	;COL0 으로 비교
		INC		R0				;R0을 1증가 
		JNB		P0.5,	GET	;COL1 비교	
		INC		R0				
		JNB		P0.6,	GET	;COL2 비교
		INC		R0	;R0에 저장된 숫자로 눌려진 키패드의 위치를 확인, ROW를 비교하고 COL을 비교하고 KEY가 눌리지 않았다면 그 다음 ROW로 이동하므로 R0는 0부터 11까지 증가할 수 있다
		RET			; CALL한 명령어로 return하여 아래 명령어부터 다시 실행

GET:		;ROW와 COL이 둘 다 0일 때 GET루프로 이동하고 0일 때는 특정 KEY가 눌려졌다는 의미
		SETB	F0	;변수 F0=1을 저장시켜 키패드 확인루프를 나갈 수 있게 설정
		RET			

OUT:					;어떤 키패드가 눌렸는지 확인하는 과정 끝


	;1입력 시 1단계 , 2입력 시 2단계, 3입력 시 3단계 루프로 이동
							
		CLR		A			;A를 0으로 초기화하고 처음 시작할 때만 A=0 이므로 무슨 단계를 선택하였는지 숫자를 출력하는 루프를 처음에만 실행
		MOV		P1,	#0BFH	;10111111B
OUT2:		JZ		OUT3		;A가 1이면 OUT3로 이동하고 ’FAIL’만 출력하기 위한 루프 / A=0이 아니기 때문에-
		JNZ		OUT4		;단계를 알려주는 ‘숫자’와 ‘FAIL’의 혼합출력을 방지
/////////////////////////////////////
OUT3:						;‘FAIL’ 출력 이전의 첫 OUT루프
		MOV		A,	R0	;R0의 값, 즉 KEY의 위치를 나타내는 값을 A에 저장
		CJNE		A,	#11,	SEL1	;R0=11 이면 KEY 1이 눌린 것이다, R0=11이 아니면 다음 SEL1으로 이동하고 다른 KEY가 눌렸는지 확인한다.
		SJMP		GAMESTART1		;1단계로 이동
SEL1:		CJNE		A,	#10,	SEL2	;RO=10 이면 KEY 2 눌린 것이다, 아니면 다음 조건으로 이동
		SJMP		GAMESTART2		;2단계로 이동
SEL2:		CJNE		A,	#9,	START ;R0=9 면 KEY 3 눌린 것이다, 아니면 다시 START루프로 이동한다, 1,2,3을 제외한 다른 KEY가 눌렸다는 것이고 3가지만 쓸 것이기 때문에 필요없다. 
		SJMP		GAMESTART3		;3단계로 이동
/////////////////////////////////////
OUT4:		;‘FAIL’ 출력 이후의 루프 / OUT3처럼 GAMESTART 루프로 이동하면 단계를 알려주는-
		;숫자와 ‘FAIL’이 혼합 출력되므로 OUT4에서는 R0값 판단 후 바로 GAME 루프로 이동	
		MOV		A,	R0	
		CJNE		A,	#11,	SEL11	
		SJMP		GAME1
SEL11:		CJNE		A,	#10,	SEL22
		SJMP		GAME2
SEL22:		CJNE		A,	#9,	START
		SJMP		GAME3
/////////////////////////////////////


GAMESTART1:						;1단계 시작
		SETB		P3.4			
		SETB		P3.3			;7-SEGMENT의 display3을 사용, edsim51의 화면으로 첫 번째를 나타낸다
		MOV		P1,	#0F9H		;숫자‘1’을 출력하여 1단계임을 알려줌
		LCALL		DELAY
		MOV		P1,	#0FFH		;7-SEGMENT에 아무것도 뜨지 않게 한다
		SJMP		GAME1

GAMESTART2:						;2단계 시작
		SETB		P3.4			
		SETB		P3.3			;7-SEGMENT의 display3을 사용
		MOV		P1,	#0A4H		;숫자‘2’를 출력하여 2단계임을 알려줌
		LCALL		DELAY
		MOV		P1,	#0FFH
		SJMP		GAME2

GAMESTART3:						;3단계 시작
		SETB		P3.4		
		SETB		P3.3			;7-SEGMENT의 display3을 사용
		MOV		P1,	#0B0H		;숫자‘3’을 출력하여 3단계임을 알려줌
		LCALL		DELAY
		MOV		P1,	#0FFH
		SJMP		GAME3
/////////////////////////////////////

GAME1:						;1단계 숫자 맞추기 시작
		MOV		A,	P2		;스위치로부터 입력을 받아 A에 저장
		CJNE		A,	#0FFH,	SUB1	;아무 스위치도 누르지 않으면 ’1’ 반복출력하고-
		SJMP		GAMESTART1		;어떤 스위치라도 눌렀으면 이동
SUB1:		CJNE		A,	#0DFH,	NOT	;다른 스위치를 눌렀으면 NOT루프로 이동 - ‘FAIL’
		SJMP		FINISH			;스위치5를 눌렀으면 FINISH루프로 이동- ‘PASS’

GAME2:						;2단계 숫자 맞추기 시작
		MOV		A,	P2
		CJNE		A,	#0FFH,	SUB21	;아무것도 안 눌렀으면 ’2‘ 반복출력
		SJMP		GAMESTART2
SUB21:		CJNE		A,	#0F7H,	NOT	;첫 스위치가 3이 아니면 FAIL 맞으면 다음루프로
		SJMP		GAME21
GAME21:						;스위치 3이 눌려진 상태
		MOV		A,	P2		;업데이트된 스위치 입력을 받아서 A에 저장
		CJNE		A,	#0F7H,	SUB22	;3만 눌러져 있으면 다음숫자를 누르라는 의미로-
		SJMP		GAME21		;아무것도 출력 X
SUB22:		CJNE		A,	#0D7H,	NOT	; 3과 5가 둘 다 눌려져 있는 것이 아니면 FAIL
		SJMP		FINISH			;맞으면 PASS

GAME3:						;3단계 숫자 맞추기 시작
		MOV		A,	P2
		CJNE		A,	#0FFH,	SUB31	;뭐라도 눌렀으면 이동
		SJMP		GAMESTART3		;아무것도 안 눌렀으면 ‘3’ 반복출력
SUB31:		;2만 눌린 것이 아니라면 SUB311로 이동. 2와 4가 눌려진 상태일수도 있기 때문-
		;2와 4를 누른 상태에서 마지막 숫자 7을 제외한 다른 스위치를 눌렀을 때 ‘FAIL’이 출력-		;되고 다시 돌아왔을 때를 대비하는 루프(3단계의 마지막 숫자를 맞출 때 에러발생을 방지)
		
		CJNE		A,	#0FBH,	SUB311		
		SJMP		GAME31	
SUB311:	CJNE		A,	#0EBH,	NOT		;2와 4가 눌렸는지 판단
		SJMP		GAME31
GAME31:							;2가 눌려진 상태
		MOV		A,	P2
		CJNE		A,	#0FBH,	SUB32		
		SJMP		GAME31
SUB32:		CJNE		A,	#0EBH,	NOT
		SJMP		GAME32
GAME32:							;2와 4가 눌려진 상태.
		MOV		A,	P2
		CJNE		A,	#0EBH,	SUB33
		SJMP		GAME32
SUB33:		CJNE		A,	#06BH,	NOT		;다른거 누르면 FAIL
		SJMP		FINISH				;7누르면 (2, 4, 7 눌려진 상태) PASS

NOT:							;FAIL 출력루프
		SETB		P3.3			;DIPS3
		SETB		P3.4
		MOV		P1,	#8EH		;’F’
		LCALL		DELAY
		MOV		P1,	#0FFH

		CLR		P3.3			;DISP2
		SETB		P3.4
		MOV		P1,	#88H		;’A’
		LCALL		DELAY
		MOV		P1,	#0FFH

		SETB		P3.3			;DISP1
		CLR		P3.4
		MOV		P1,	#0CFH		;’I’
		LCALL		DELAY	
		MOV		P1,	#0FFH

		CLR		P3.3			;DISP0
		CLR		P3.3
		MOV		P1,#0C7H		;’L’
		LCALL		DELAY
		MOV		P1,#0FFH
	
		LJMP		OUT2			;그냥 OUT로 점프하면 다른것과 혼합출력 발생

FINISH:						;PASS 출력 
		MOV		R1,	#3		;PASS출력 횟수 설정(3번)


FINISH2:						;PASS 3번 출력		
		SETB		P3.3		
		SETB		P3.4
		MOV		P1,	#8CH		;‘P’
		LCALL		DELAY
		MOV		P1,	#0FFH

		CLR		P3.3
		SETB		P3.4
		MOV		P1,	#88H		;’A’
		LCALL		DELAY
		MOV		P1,	#0FFH

		SETB		P3.3
		CLR		P3.4
		MOV		P1,	#92H		;’S’
		LCALL		DELAY	
		MOV		P1,	#0FFH

		CLR		P3.3
		CLR		P3.3
		MOV		P1,	#92H		;’S’
		LCALL		DELAY
		MOV		P1,	#0FFH

		DJNZ		R1,	FINISH2	;‘PASS’를 3번 출력했으면 NEWSTART로 이동
		SJMP		NEWSTART

NEWSTART:	;다른 단계로 이동하기 위한 루프. 이 루프를 실행함으로써 다른 KEY를 눌렀을 때-
		;원래 눌러져 있던 KEY의 값이 새로운 KEY의 값으로 업데이트된다.
		;키패드의 어떤 새로운 KEY가 눌러졌는지 확인해주는 루프. START루프와 같다.

		SETB		P3.4
		SETB		P3.3
		MOV		P1,	#0BFH	;현 단계의 끝과 새로운 단계의 시작을 알리는 ‘-’출력

		MOV		R0,	#00H
		CLR		F0

;ROW0 확인
		CLR		P0.0
		SETB		P0.1
		SETB		P0.2
		SETB		P0.3
		LCALL		COL1
		JB		F0, 	NEW
				
;ROW1 확인
		CLR		P0.1
		SETB		P0.0
		SETB		P0.2
		SETB		P0.3
		LCALL		COL1
		JB		F0, 	NEW

;ROW2 확인	
		CLR		P0.2
		SETB		P0.0
		SETB		P0.1
		SETB		P0.3
		LCALL		COL1
		JB		F0, 	NEW

;ROW3 확인
		CLR		P0.3
		SETB		P0.0
		SETB		P0.1
		SETB		P0.2
		LCALL		COL1
		JB		F0, 	NEW
		
		LJMP		NEWSTART

COL1:								;column확인
		JNB		P0.4,	GET1
		INC		R0
		JNB		P0.5,	GET1
		INC		R0
		JNB		P0.6,	GET1
		INC		R0
		RET

GET1:								;키가 입력됨
		SETB		F0
		RET
			
NEW:		;새로운 KEY의 값을 입력받아 A에 저장. A=0이면 (#KEY입력) GO루프로 가서
		;처음으로 돌아가 게임의 새로운 단계를 선택할 수 있게 된다.
		;이때 #KEY를 누르지 않으면 새로운 게임을 시작할 수 없다.(어떤 KEY가 눌려졌는지-
		;확인만 하고 아무 동작도 하지 않는다)
		CLR		A	
		MOV		A,	R0	
		JZ		GO
		JNZ		NEWSTART

GO:		
		LJMP		START

DELAY:					;딜레이 서브루틴
		MOV		R2,#200
HERE:		DJNZ		R2,HERE
		RET

		END				; END!!!

